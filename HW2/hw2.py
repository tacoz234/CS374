"""Practice writing CRUD queries using SQLite and Python's DB-API.


Author: Cole Determan
Version: 9/7/2025
"""


from pprint import pprint
import sqlite3




def connect(path):
    """Connect to the SQLite database file and return a cursor.


    This function defines the global variables con and cur, which
    you will use throughout the module.


    THE CODE IS ALREADY FINISHED; DO NOT EDIT THIS FUNCTION.


    Args:
        path (str): File system path to the SQLite database file.


    Returns:
        sqlite3.Cursor: An object for executing SQL statements.
    """
    global con, cur
    con = sqlite3.connect(path)
    cur = con.cursor()
    cur.execute("PRAGMA foreign_keys = ON")




def create():
    """Execute SQL statements that create two tables of your choice.


    Try to think of a unique example; no two students should have the
    same table/column names and design. Your tables must have at least
    five columns. At least one column must be an INTEGER, at least one
    column must be a REAL number, and at least one column must be TEXT.


    The first column of each table must be "id integer PRIMARY KEY".
    Generally, this is not a good design, but it makes autograding the
    assignment easier.


    The second table must have a FOREIGN KEY reference to the first
    table. Most but not all of the columns should be NOT NULL.
    """
    cur.execute("""
    CREATE TABLE superheroes (
      id integer PRIMARY KEY,
      hero_name TEXT NOT NULL,
      secret_identity TEXT NOT NULL,
      age REAL NOT NULL,
      height REAL NOT NULL,
      nick_name TEXT NOT NULL
      )""")
    con.commit()
    cur.execute("""
    CREATE TABLE supervillains (
      id integer PRIMARY KEY,
      villain_name TEXT NOT NULL,
      age REAL NOT NULL,
      height REAL NOT NULL,
      main_hero_id INTEGER NOT NULL,
      FOREIGN KEY (main_hero_id) REFERENCES superheroes(id)
    )""")
    con.commit()




def drop():
    """Execute SQL statements that drop your tables, if they exist.


    This function is called at the beginning of the __main__ block so
    that you can run the program over and over again to test your code.
    """
    cur.execute("DROP TABLE IF EXISTS supervillains")
    con.commit()
    cur.execute("DROP TABLE IF EXISTS superheroes")
    con.commit()




def insert_sample():
    """Execute SQL statements that insert three rows into each table.


    The rows you insert should have realistic data values that show an
    example of what the data might look like in each table. Please write
    one INSERT statement that inserts three rows, not three statements
    that insert one row each. At least one of the text values must have
    an apostrophe (Ex: "JMU's mascot is the Duke Dog").


    Note: The id values (in the first column) should be automatically
    generated by SQLite. Do not include the id column in your code.
    """
    cur.execute("""
    INSERT INTO superheroes (hero_name, secret_identity, age, height, nick_name)
    VALUES
    ('Superman', 'Clark Kent', 87, 1.93, 'The Man of Steel'),
    ('Batman', 'Bruce Wayne', 86, 1.88, 'The World''s Greatest Detective'),
    ('Wonder Woman', 'Diana Prince', 84, 1.88, 'The Princess Diana')
    """)
    con.commit()
    cur.execute("""
    INSERT INTO supervillains (villain_name, age, height, main_hero_id)
    VALUES ('Lex Luthor', 85, 1.87, 1),
    ('Joker', 85, 1.88, 2),
    ('Ares', 83, 1.90, 3);
    """)
    con.commit()




def insert(hero_name, secret_identity, age, height, nick_name):
    """Execute an SQL statement that inserts a row into the first table.


    The values must be passed as parameters to this function. If your
    table has 10 columns, then this function should have 9 parameters.
    As a matter of style, the parameter and column names must match.


    Note: The id value (in the first column) should be automatically
    generated by SQLite. Do not include the id column in your code.


    TODO Add parameters to the function definition and the docstring.
    args:
        hero_name (str): The name of the superhero.
        secret_identity (str): The secret identity of the superhero.
        age (int): The age of the superheroes since they first appeared.
        height (float): The height of the superhero in meters.
    """
    cur.execute("""
    INSERT INTO superheroes (hero_name, secret_identity, age, height, nick_name)
    VALUES (?, ?, ?, ?, ?)
    """, (hero_name, secret_identity, age, height, nick_name))
    con.commit()




def select_all():
    """Execute an SQL statement that selects all rows from the first table.


    Returns:
        list[tuple]: Each tuple represents a row of the table.
    """
    cur.execute("SELECT * FROM superheroes")
    return cur.fetchall()




def select(pk):
    """Execute an SQL statement that selects one row from the first table.


    Args:
        pk (int): The id of the row to select.


    Returns:
        tuple: The row for the specified pk, or None if not found.
    """
    cur.execute("SELECT * FROM superheroes WHERE id = ?", (pk,))
    return cur.fetchone()




def update(pk, hero_name, secret_identity, age, height, nick_name):
    """Execute an SQL statement that updates one row in the first table.


    The values must be passed as parameters to this function. If your
    table has 10 columns, then this function should have 10 parameters.
    As a matter of style, the parameter and column names must match.


    TODO Add parameters to the function definition and the docstring.
    args:
        pk (int): The id of the row to update.
        hero_name (str): The name of the superhero.
        secret_identity (str): The secret identity of the superhero.
        age (int): The age of the superheroes since they first appeared.
        height (float): The height of the superhero in meters.
    """
    cur.execute("""
    UPDATE superheroes
    SET hero_name = ?, secret_identity = ?, age = ?, height = ?, nick_name = ?
    WHERE id = ?
    """, (hero_name, secret_identity, age, height, nick_name, pk))
    con.commit()




def delete(pk):
    """Execute an SQL statement that deletes one row from the first table.


    Note that, because of the foreign key, you cannot delete a row that is
    referenced by the second table. If needed, modify the insert_sample()
    function to insert at least one row that is not related to the second
    table. Use that row's id to test this function.


    Args:
        pk (int): The id of the row to delete.
    """
    cur.execute("DELETE FROM superheroes WHERE id = ?", (pk,))
    con.commit()




def insert_invalid():
    """Cause the foreign key constraint to be violated by inserting a row.


    The purpose of this function is to demonstrate your understanding of
    foreign keys. Execute an SQL statement that inserts an invalid row into
    the second table. The values should be hard-coded -- don't use question
    marks in the query. SQLite should raise an IntegrityError when you call
    the cur.execute() method.
    """
    cur.execute("""
    INSERT INTO supervillains (villain_name, age, height, main_hero_id)
    VALUES ('Magneto', 80, 1.83, 4)
    """)
    con.commit()




def update_invalid():
    """Cause the foreign key constraint to be violated by updating a row.


    The purpose of this function is to demonstrate your understanding of
    foreign keys. Execute an SQL statement that updates a row in the second
    table. SQLite should raise an IntegrityError. The query values should be
    hard-coded -- don't use question marks.
    """
    cur.execute("""
    UPDATE supervillains
    SET main_hero_id = 4
    WHERE villain_name = 'Joker'
    """)
    con.commit()




def delete_invalid():
    """Cause the foreign key constraint to be violated by deleting a row.


    The purpose of this function is to demonstrate your understanding of
    foreign keys. Execute an SQL statement that deletes a row in the first
    table. SQLite should raise an IntegrityError. The query values should be
    hard-coded -- don't use question marks.
    """
    cur.execute("""
    DELETE FROM superheroes
    WHERE hero_name = 'Batman'
    """)
    con.commit()


if __name__ == "__main__":


    # Feel free to modify the path to your SQLite database file.
    # The autograder will use a different path for the database.


    connect("hw2.db")


    # The following code is provided to test your functions before submitting.
    # TODO Be sure to add the arguments required for insert() and update().


    drop()
    create()
    insert_sample()
    pprint(select_all())
    print()


    insert('Spiderman', 'Peter Parker', 63, 1.80, 'The Scarlet Web')
    pprint(select(4))
    print()


    update(4, 'Spiderman', 'Peter Parker', 63, 1.80, 'Tiger')
    delete(4)
    pprint(select_all())
    print()


    # The following tests make sure that your "invalid" functions work.


    try:
        insert_invalid()
        print("insert_invalid doesn't work")
    except sqlite3.IntegrityError:
        pass


    try:
        update_invalid()
        print("update_invalid doesn't work")
    except sqlite3.IntegrityError:
        pass


    try:
        delete_invalid()
        print("delete_invalid doesn't work")
    except sqlite3.IntegrityError:
        pass



